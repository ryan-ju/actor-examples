group 'com.lmlt.actor.example'
version '1.0.0-SNAPSHOT'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

apply plugin: 'scala'
apply plugin: 'application'

def protoDestDir = "src/main/protoc-generated"
def protoFile = "../../courier-realtime-protobuf/message.proto"
def protoThirdParty = "../../courier-realtime-protobuf/"

repositories {
    jcenter()
}

configurations {
    scalapbc
}

dependencies {
    scalapbc 'com.trueaccord.scalapb:scalapbc_2.12:0.6.0-pre5'
    compile 'com.trueaccord.scalapb:scalapb-runtime_2.12:0.6.0-pre5'
    // The production code uses the SLF4J logging API at compile time
    compile 'com.typesafe.akka:akka-http_2.12:10.0.7'
//    compile 'com.typesafe.akka:akka-actor_2.11:2.5.1'
//    compile 'com.typesafe.akka:akka-stream_2.11:2.5.1'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'com.amazonaws:aws-java-sdk-kinesis:1.11.145'
    compile 'com.typesafe:config:1.3.1'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

task scalapbc {
    doLast {
        delete protoDestDir

        mkdir(protoDestDir)

        javaexec {
            main = 'com.trueaccord.scalapb.ScalaPBC'
            classpath = configurations.scalapbc
            args = [protoFile, "--scala_out=${protoDestDir}", "--proto_path=${protoThirdParty}"]
        }
    }
}

compileScala {
    dependsOn scalapbc
    source protoDestDir
}

clean {
    delete protoDestDir
}

mainClassName = "com.lmlt.actor.example.courier.realtime.kinesis.Main"
