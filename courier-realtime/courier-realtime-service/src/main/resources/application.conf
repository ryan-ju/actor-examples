application {
  region = "eu-west-1"
  gridSize = 10
  kinesis-consumer-cluster {
    streamName = "courier-realtime-stream"
    region = "kinesis-consumer-cluster"
    shardNr = 10
    snapshotAfterMessageNr = 10
  }
  courier-cluster {
    region = "courier-cluster"
    shardNr = 10
    snapshotAfterMessageNr = 10
  }
  grid-cluster {
    region = "grid-cluster"
    shardNr = 10
    snapshotAfterMessageNr = 10
  }
  courier {
    offlineAfterS = 10
  }
  cassandra {
    cluster: ["127.0.0.1"],
    port: 9042,
    place {
      keyspace: "courier_realtime",
      columnFamily: "place"
    }
  }
  websocket {
    // Set this to false in load test
    enabled = true
    port = 3000
  }
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  extensions = ["akka.cluster.pubsub.DistributedPubSub"]

  actor {
    provider = "cluster"

    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      "java.lang.String" = java
      "com.trueaccord.scalapb.GeneratedMessage" = proto
    }
  }

  remote {
    log-remote-lifecycle-events = off
    //    netty.tcp {
    //      hostname = "127.0.0.1"
    //      port = 0
    //    }
    artery {
      enabled = on
      canonical.hostname = "127.0.0.1"
      canonical.port = 0
    }
  }

  cluster {
    seed-nodes = ["akka://cluster-system@127.0.0.1:2551"]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    #
    # auto-down-unreachable-after = 10s

    sharding {
      remember-entities = true

      state-store-mode = persistence

      # Setting for the default shard allocation strategy
      least-shard-allocation-strategy {
        # Threshold of how large the difference between most and least number of
        # allocated shards must be to begin the rebalancing.
        rebalance-threshold = 2

        # The number of ongoing rebalancing processes is limited to this number.
        max-simultaneous-rebalance = 3
      }
    }
  }

  persistence {
    journal {
      plugin = "cassandra-journal"
    }

    snapshot-store {
      plugin = "cassandra-snapshot-store"
    }
  }
}

# Separate dispatcher to handle Kinesis consumer slave messages to avoid starve the main actor system
kinesis-consumer-slave-dispatcher {
  fork-join-executor.parallelism-min = 10
  fork-join-executor.parallelism-max = 10
}

# Separate dispatcher to handle http
http-dispatcher {
  fork-join-executor.parallelism-min = 10
  fork-join-executor.parallelism-max = 10
}

cassandra-journal {
  contact-points = ["127.0.0.1"]
  keyspace = "akka"
  keyspace-autocreate = true
  tables-autocreate = true
}

cassandra-snapshot-store {
  contact-points = ["127.0.0.1"]
  keyspace = "akka_snapshot"
  keyspace-autocreate = true
  tables-autocreate = true
}

kamon {
  reporters = ["kamon.datadog.DatadogAgentReporter"]

  util {
    filters {
      akka-actor {
        includes = []
        excludes = ["kamon/**", "*/system/**", "*/user/IO-**"]
      }

      hello-cluster-actors {
        includes = ["*/system/sharding/hello/*/*"]
        excludes = ["kamon/**"]
      }

      akka-dispatcher {
        includes = ["**"]
        excludes = []
      }
    }
  }

  // Only available in kamon 1.0.0
  akka {
    actor-groups = ["hello-cluster-actors"]
  }

  datadog {
    subscriptions {
      fork-join-pool = ["**"]
    }

    time-units = "ms"
    information-units = "mb"
  }

}